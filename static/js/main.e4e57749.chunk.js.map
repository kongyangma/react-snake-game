{"version":3,"sources":["component/Snake/index.js","common/Portal/index.js","component/App/App.js","serviceWorker.js","index.js"],"names":["size","direction","red","className","black","Index","props","getSnack","c","r","state","snake","food","s","x","y","timer","interval","setInterval","this","move","dir","bind","setState","status","first","last","_snake","filter","item","length","handleRestart","eat","showFood","next_first","pause","i","window","clearInterval","handleStart","score","parseInt","Math","random","document","onkeydown","event","keyCode","border","renderBackground","onClick","trs","tds","j","value","push","key","Component","Portal","exact","from","to","path","component","Snake","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e4e57749.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './index.sass';\r\n\r\nconst size = { row: 20, col: 20 };\r\nvar direction = { down: 1, up: 2, left: 3, right: 4 };\r\nvar red = <div className=\"red\"></div>;\r\nvar black = <div className=\"black\"></div>;\r\n\r\nclass Index extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            snake: [{ x: 1, y: 1 }],\r\n            food: { x: 1, y: 4 },\r\n            dir: direction.right,\r\n            interval: '',\r\n            status: 'start', // start or pause\r\n            score: 0,\r\n        }\r\n    }\r\n\r\n    // 组件渲染后调用\r\n    componentDidMount() {\r\n        // 键盘点击事件 onkeydown 在按键按下时触发\r\n        document.onkeydown = function (event) {\r\n            var e = event || window.event;\r\n            var keyCode = e.keyCode;\r\n            if (keyCode === 37 || keyCode === 65) { // left a\r\n                this.move(direction.left);\r\n                this.setState({ dir: direction.left })\r\n            } else if (keyCode === 38 || keyCode === 87) { // up w\r\n                this.move(direction.up);\r\n                this.setState({ dir: direction.up })\r\n            } else if (keyCode === 39 || keyCode === 68) { // right d\r\n                this.move(direction.right);\r\n                this.setState({ dir: direction.right })\r\n            } else if (keyCode === 40 || keyCode === 83) { // down s\r\n                this.move(direction.down);\r\n                this.setState({ dir: direction.down })\r\n            }\r\n        }.bind(this);\r\n        // 初次渲染的时候开启定时\r\n        this.timer();\r\n    }\r\n\r\n    render() {\r\n        const { score, status } = this.state;\r\n        return (\r\n            <div className=\"snakeBackground\">\r\n                <div className=\"snakeTitle\">\r\n                    Snake Game\r\n        <div className=\"snakeScore\">score: {score}</div>\r\n                </div>\r\n                <div className=\"snakeBody\">\r\n                    <table border=\"1\">\r\n                        {this.renderBackground()}\r\n                    </table>\r\n                    <div className=\"buttonGroup\">\r\n                        <button onClick={status === 'pause' ? this.handleStart : this.pause}>\r\n                            {status === 'pause' ? 'start' : 'pause'}\r\n                        </button>\r\n                        <button onClick={this.handleRestart}>Restart</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // 画出背景，初始化初始蛇的位置，蛇为黑色，食物为红色\r\n    renderBackground() {\r\n        let trs = [];\r\n        for (let i = 0; i < size.row; i++) {\r\n            let tds = [];\r\n            for (let j = 0; j < size.col; j++) {\r\n                let value = this.getSnack(i, j);\r\n                if (value === 0) {\r\n                    tds.push(<td key={i * 200 + j}></td>);\r\n                } else if (value === 1) {\r\n                tds.push(<td key={i * 100 + j}>{black}</td>)\r\n                } else if (value === 2) {\r\n                tds.push(<td key={i * 5 + j}>{red}</td>)\r\n                }\r\n            }\r\n        trs.push(<tr key={i}>{tds}</tr>)\r\n        }\r\n    return <tbody>{trs}</tbody>;\r\n    }\r\n\r\n    // 获取在方块中蛇以及食物的显示\r\n    getSnack = (c, r) => {\r\n        const { snake, food } = this.state;\r\n        for (let s in snake) {\r\n            // 如果这个点是蛇，则返回1\r\n            if (snake[s].x === c && snake[s].y === r) {\r\n                return 1;\r\n            }\r\n            // 如果这个点是食物，则返回2\r\n            if (food.x === c && food.y === r) {\r\n                return 2;\r\n            }\r\n        }\r\n\r\n        // 如果这个点什么都不是返回0\r\n        return 0;\r\n    }\r\n\r\n    // 蛇可以定时自己移动\r\n    timer = () => {\r\n        let interval = setInterval(function () {\r\n            this.move(this.state.dir);\r\n        }.bind(this), 600);\r\n        this.setState({ interval, status: 'start' })\r\n    }\r\n\r\n    // 蛇吃完食物变长，继续行走，蛇头撞到自己失败，重新开始\r\n    // 蛇的每个部分统一行走，转换方向时，后一个按照前一个的轨迹进行行走\r\n    // 超过边界时，重新开始\r\n    move = (dir) => {\r\n        const { snake, food } = this.state;\r\n        let first = { x: snake[0].x, y: snake[0].y }\r\n        let last = {};\r\n        // move\r\n        if (dir === direction.up) {\r\n            first.x -= 1;\r\n        } else if (dir === direction.down) {\r\n            first.x += 1;\r\n        } else if (dir === direction.left) {\r\n            first.y -= 1;\r\n        } else if (dir === direction.right) {\r\n            first.y += 1;\r\n        }\r\n\r\n        // 撞到自己\r\n        let _snake = snake.filter(item => item.x === first.x && item.y === first.y)\r\n        if (first.y > size.col - 1 || first.y < 0 || first.x < 0 || first.x > size.row - 1 || _snake.length > 0) {\r\n            this.handleRestart();\r\n            return;\r\n        }\r\n\r\n        let eat = false;\r\n        // 吃到食物\r\n        if (first.x === food.x && first.y === food.y) {\r\n            eat = true;\r\n            last = { x: snake[snake.length - 1].x, y: snake[snake.length - 1].y }\r\n            this.showFood();\r\n        }\r\n\r\n        // 蛇整体动起来\r\n        for (let s in snake) {\r\n            var next_first = { x: snake[s].x, y: snake[s].y };\r\n            snake[s].x = first.x;\r\n            snake[s].y = first.y;\r\n            first = next_first;\r\n        }\r\n\r\n        // 吃到食物之后蛇变长\r\n        if (eat) {\r\n            snake[snake.length] = last\r\n        }\r\n\r\n        this.setState({ snake })\r\n    }\r\n\r\n    // 暂停\r\n    pause = () => {\r\n        let i = this.state.interval;\r\n        window.clearInterval(i); // 清除定时器\r\n        this.setState({ status: 'pause' })\r\n    }\r\n\r\n    // 开始\r\n    handleStart = () => { \r\n        const { status } = this.state;\r\n        if (status === 'pause') {\r\n            this.timer(); // 重新开启定时器\r\n        }\r\n    }\r\n\r\n    // 重新开始\r\n    handleRestart = () => {\r\n        let i = this.state.interval;\r\n        window.clearInterval(i);\r\n        this.setState({\r\n            snake: [{ x: 1, y: 1 }],\r\n            food: { x: 1, y: 4 },\r\n            dir: direction.right,\r\n            interval: 2,\r\n            status: 'start',\r\n            score: 0\r\n        })\r\n        this.timer()\r\n    }\r\n\r\n    // 显示新的食物\r\n    showFood = () => {\r\n        let x = parseInt(Math.random() * size.row);\r\n        let y = parseInt(Math.random() * size.col);\r\n        if (this.getSnack() !== 0) {\r\n            x = parseInt(Math.random() * size.row);\r\n            y = parseInt(Math.random() * size.col);\r\n        }\r\n        // 每次显示新的食物意味着吃了上一个食物，加1分\r\n        let score = this.state.score + 1;\r\n        this.setState({ food: { x: x, y: y }, score })\r\n    }\r\n}\r\n\r\n\r\nexport default Index;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\r\nimport Snake from '../../component/Snake';\r\n\r\nexport default class Portal extends Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Switch>\r\n                    <Redirect exact from=\"/\" to=\"/snake\" />\r\n                    <Route path=\"/snake\" component={Snake} />\r\n                </Switch>\r\n            </Router>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\n\nimport Portal from '../../common/Portal';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Portal />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}